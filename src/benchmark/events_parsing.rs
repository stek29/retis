use std::time::Instant;

use anyhow::Result;

use crate::{core::events::bpf::parse_raw_event, module::get_modules};

/// Benchmark time to parse a bunch of raw events.
pub(super) fn bench(ci: bool) -> Result<()> {
    let iters = match ci {
        false => 1000000,
        true => 1,
    };

    let modules = get_modules()?;
    let mut factories = modules.section_factories()?;

    // 810808069050 (0) [retis] 30910/30991 [tp] openvswitch:ovs_do_execute_action #bcc7ecec80ffff90af48e91400 (skb ffff90af42f4f900)
    //   ns 4026531840 if 10 (ovs-br0) rxif 2 2a:ba:5a:c1:81:4f > 2e:89:3b:fe:22:7a ethertype IPv4 (0x0800) 1.1.1.1.443 > 10.0.42.2.40204 ttl 55 tos 0x0 id 8224 off 0 [DF] len 52 proto TCP (6) flags [F.] seq 529864278 ack 2449192177 win 8 skb [csum unnecessary (level 0) hash 0x7a3e4e65 len 66 priority 0 users 1 dataref 1]
    //   exec oport 3
    //   ct_state REPLY tcp (LAST_ACK) orig [10.0.42.2.40204 > 1.1.1.1.443] reply [1.1.1.1.443 > 172.16.42.90.40204] zone 0
    let data = [
        71, 2, 1, 0, 12, 0, 186, 75, 237, 199, 188, 0, 0, 0, 0, 0, 0, 0, 1, 1, 72, 0, 15, 121, 0,
        0, 190, 120, 0, 0, 114, 101, 116, 105, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 17, 0, 32, 81, 162, 192, 255, 255, 255, 255,
        2, 255, 255, 255, 255, 255, 255, 255, 255, 8, 5, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 7, 4, 0,
        3, 0, 0, 0, 10, 0, 80, 0, 23, 0, 0, 0, 0, 0, 10, 0, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 157, 12, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 187, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 187, 172, 16, 42, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
        12, 3, 6, 7, 1, 7, 1, 66, 0, 0, 0, 66, 0, 0, 0, 46, 137, 59, 254, 34, 122, 42, 186, 90,
        193, 129, 79, 8, 0, 69, 0, 0, 52, 32, 32, 64, 0, 55, 6, 237, 160, 1, 1, 1, 1, 10, 0, 42, 2,
        1, 187, 157, 12, 31, 149, 22, 86, 145, 251, 180, 241, 128, 17, 0, 8, 17, 72, 0, 0, 1, 1, 8,
        10, 28, 109, 231, 120, 127, 134, 144, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 24, 0, 111, 118,
        115, 45, 98, 114, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 2, 0, 0, 0, 7, 3, 4, 0, 0, 0,
        0, 240, 7, 4, 22, 0, 66, 0, 0, 0, 0, 0, 0, 0, 101, 78, 62, 122, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 7, 5, 5, 0, 0, 0, 0, 1, 1, 5, 1, 24, 0, 0, 20, 233, 72, 175, 144, 255, 255, 128, 236,
        236, 199, 188, 0, 0, 0, 0, 249, 244, 66, 175, 144, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];

    // Parse one first as some factories have on-demand
    // initialization steps.
    let now = Instant::now();
    parse_raw_event(&data, &mut factories)?;
    println!("first_raw_event_parsing_us {}", now.elapsed().as_micros());

    let now = Instant::now();
    for _ in 0..iters {
        parse_raw_event(&data, &mut factories)?;
    }
    println!("1M_raw_events_parsing_us {}", now.elapsed().as_micros());

    Ok(())
}
